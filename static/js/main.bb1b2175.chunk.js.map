{"version":3,"sources":["components/Navigation.tsx","components/Field.tsx","components/Button.tsx","components/ManipulationPanel.tsx","utils/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navigation","length","difficulty","onChangeDifficulty","upVisibility","downVisibility","className","onClick","Field","fields","map","row","column","Button","status","onStart","onRestart","onStop","ManipulationPanel","onChange","icon","faArrowLeft","faArrowUp","faArrowDown","faArrowRight","getFoodPosition","fieldSize","excludes","x","Math","floor","random","y","some","item","initFields","snake","i","cols","Array","fill","push","food","GameStatus","Direction","OppositeDirection","up","right","left","down","DirectionKeyCodeMap","w","a","d","s","initialPosition","Delta","initialValues","Difficulty","timer","undefined","unsubscribe","clearInterval","App","useState","setFields","body","setBody","setStatus","setDifficulty","tick","setTick","direction","setDirection","useEffect","setInterval","handleMoving","onChangeDirection","useCallback","newDirection","handleKeyDown","e","key","document","addEventListener","removeEventListener","position","delta","newPosition","isEatingMysellf","newBody","removingTrack","pop","unshift","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bb1b2175.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\ntype Props = {\n  length: number;\n  difficulty: number;\n  onChangeDifficulty: (difficulty: number) => void;\n}\n\nconst Navigation :FC<Props> = ({ length, difficulty = 3, onChangeDifficulty }) => {\n  const upVisibility = difficulty < 5 ? '' : 'is-hidden'\n  const downVisibility = difficulty > 1 ? '' : 'is-hidden'\n  const onUpDifficulty = () => onChangeDifficulty(difficulty + 1)\n  const onDownDifficulty = () => onChangeDifficulty(difficulty -1)\n  return (\n    <div className=\"navigation\">\n      <div className=\"navigation-item\">\n        <span className=\"navigation-label\">Length: </span>\n        <div className=\"navigation-item-number-container\">\n          <div className=\"num-board\">{length}</div>\n        </div>\n      </div>\n      <div className=\"navigation-item\">\n        <span className=\"navigation-label\">Difficult: </span>\n        <div className=\"navigation-item-number-container\">\n          <span className=\"num-board\">{difficulty}</span>\n          <div className=\"difficult-button-container\">\n            <div\n              className={`difficulty-button difficulty-up ${upVisibility}`}\n              onClick={onUpDifficulty}\n            ></div>\n            <div\n              className={`difficulty-button difficulty-down ${downVisibility}`}\n              onClick={onDownDifficulty}\n            ></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Navigation;\n","import React, { FC } from 'react';\n\ntype props = {\n  fields: string[][];\n}\n\nconst Field :FC<props> = ({ fields }) => {\n  return (\n    <div className=\"field\">\n      {\n        fields.map((row) => {\n          return row.map((column) => {\n            return <div className={`dots ${column}`}></div>\n          })\n        })\n      }\n    </div>\n  );\n};\n\nexport default Field;\n","import React, { FC } from 'react';\nimport { gameStatusWord } from '../App'\n\ntype Props = {\n  status: gameStatusWord\n  onStart: () => void;\n  onRestart: () => void;\n  onStop: () => void;\n}\n\nconst Button :FC<Props> = ({ status, onStart, onRestart, onStop }) => {\n  return (\n    <div className=\"button\">\n      { status === \"gameover\" && <button className=\"btn btn-gameover\" onClick={ onRestart }>gameover</button> }\n      { status === \"init\" && <button className=\"btn btn-init\" onClick={ onStart }>start</button> }\n      { status === \"suspended\" && <button className=\"btn btn-suspended\" onClick={ onStart }>start</button> }\n      { status === \"playing\" && <button className=\"btn btn-playing\" onClick={ onStop }>stop</button> }\n    </div>\n  );\n};\n\nexport default Button;\n","import React, { FC } from 'react';\nimport { directionWord } from '../App';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faArrowLeft,\n  faArrowUp,\n  faArrowDown,\n  faArrowRight\n} from '@fortawesome/free-solid-svg-icons'\n\ntype Props = {\n  onChange: (word: directionWord) => void\n}\n\nconst ManipulationPanel :FC<Props> = ({ onChange }) => {\n  const onUp = () => onChange('up');\n  const onRight = () => onChange('right');\n  const onLeft = () => onChange('left');\n  const onDown = () => onChange('down');\n\n  return (\n    <div className=\"manipulation-panel\">\n      <button className=\"manipulation-btn btn btn-left\" onClick={ onLeft }>\n        <FontAwesomeIcon icon={faArrowLeft} />\n      </button>\n      <div>\n        <button className=\"manipulation-btn btn btn-up\" onClick={ onUp }>\n          <FontAwesomeIcon icon={faArrowUp} />\n        </button>\n        <button className=\"manipulation-btn btn btn-down\" onClick={ onDown }>\n          <FontAwesomeIcon icon={faArrowDown} />\n        </button>\n      </div>\n      <button className=\"manipulation-btn btn btn-right\" onClick={ onRight }>\n        <FontAwesomeIcon icon={faArrowRight} />\n      </button>\n    </div>\n  );\n};\n\nexport default ManipulationPanel;\n","import { initialPosi } from '../App';\n\nexport const getFoodPosition = (fieldSize: number, excludes: initialPosi[]) => {\n  while(true) {\n    const x = Math.floor(Math.random() * (fieldSize -5)) +1;\n    const y = Math.floor(Math.random() * (fieldSize -5)) +1;\n    const conflict = excludes.some(item => item.x === x && item.y === y)\n    if(!conflict) {\n      return {x, y}\n    }\n  }\n};\n\nexport const initFields = (fieldSize: number, snake: initialPosi) => {\n  const fields: string[][] = [];\n  for(let i = 0; i < fieldSize; i++){\n    const cols: string[] = new Array(fieldSize).fill('');\n    fields.push(cols);\n  };\n  fields[snake.x][snake.y] = 'snake';\n\n  const food = getFoodPosition(fieldSize, [snake]);\n  fields[food.y][food.x] = 'food';\n\n  return fields;\n};\n","import React, { FC, useState, useEffect, useCallback } from 'react';\nimport Navigation from './components/Navigation';\nimport Field from './components/Field';\nimport Button from './components/Button';\nimport MnipulationPanel from './components/ManipulationPanel';\nimport { initFields, getFoodPosition } from './utils/index';\n\ntype initDelta = {[word: string]: initialPosi};\nexport type gameStatusWord = 'init' |'playing' | 'suspended' | 'gameover';\ntype gameStatusInit = {\n  init: 'init',\n  playing: 'playing',\n  suspended: 'suspended',\n  gameover: 'gameover',\n};\nconst GameStatus: Readonly<gameStatusInit> = {\n  init: 'init',\n  playing: 'playing',\n  suspended: 'suspended',\n  gameover: 'gameover',\n};\nexport type directionWord = 'up' | 'right' | 'left' | 'down';\ntype directionInit = {\n  up: 'up' | 'down',\n  right: 'right' | 'left',\n  left: 'left' | 'right',\n  down: 'down' | 'up',\n};\nconst Direction: Readonly<directionInit> = {\n  up: 'up',\n  right: 'right',\n  left: 'left',\n  down: 'down',\n};\nconst OppositeDirection: Readonly<directionInit> = {\n  up: 'down',\n  right: 'left',\n  left: 'right',\n  down: 'up',\n};\nconst DirectionKeyCodeMap: Readonly<{[KeyboardEvent: string]: directionWord}> = {\n  w: Direction.up,\n  a: Direction.left,\n  d: Direction.right,\n  s: Direction.down\n}\nexport type initialPosi = {x: number, y: number};\nconst initialPosition: Required<[initialPosi]> = [{ x: 17, y: 17 }]\nconst Delta: initDelta = {\n  up: { x: 0, y: -1 },\n  right: { x: 1, y: 0 },\n  left: { x: -1, y: 0 },\n  down: { x: 0, y: 1 },\n};\nconst initialValues: Required<string[][]> = initFields(35, ...initialPosition);\nconst defaultInterval: Readonly<number> = 100;\nconst defaultDifficuty: number = 3;\n\nconst Difficulty: Readonly<number[]> = [1000, 500, 100, 50, 10];\n\nlet timer: NodeJS.Timer | undefined = undefined;\n\nconst unsubscribe = () => {\n  if (!timer) {\n    return\n  }\n  clearInterval(timer)\n};\n\nconst isCollision = (fieldSize: number, position: initialPosi) => {\n  if(position.y < 0 || position.x < 0) {\n    return true;\n  };\n  if(position.y > fieldSize -1 || position.x > fieldSize -1) {\n    unsubscribe()\n    return true;\n  };\n  return false;\n};\n\nconst isEatingMysellf = (fields: string[][], position: initialPosi) => {\n  return fields[position.y][position.x] === 'snake';\n};\n\nconst App: FC = () => {\n  const [ fields, setFields ] = useState<string[][]>(initialValues);\n  const [ body, setBody ] = useState<initialPosi[]>(initialPosition);\n  const [status, setStatus] = useState<gameStatusWord>(GameStatus.init);\n  const [ difficulty, setDifficulty ] = useState(defaultDifficuty);\n  const [ tick, setTick ] = useState(0);\n  const [ direction, setDirection ] = useState<directionWord>(Direction.up);\n\n  useEffect(() => {\n    setBody(initialPosition);\n    const interval = Difficulty[difficulty - 1];\n    timer = setInterval(() => {\n      setTick(tick => tick +1);\n    }, interval);\n    return unsubscribe;\n  }, [difficulty]);\n\n  useEffect(() => {\n    if (!body.length || status !== GameStatus.playing) {\n      return\n    }\n    const canContinue = handleMoving();\n    if(!canContinue) {\n      unsubscribe()\n      setStatus(GameStatus.gameover)\n    }\n  }, [tick]);\n\n  const onStart = (): void => setStatus(GameStatus.playing);\n\n  const onStop = (): void => setStatus(GameStatus.suspended);\n\n  const onRestart = (): void => {\n    timer = setInterval(() => {\n      setTick(tick => tick + 1);\n    }, defaultInterval);\n    setDirection(Direction.up);\n    setStatus(GameStatus.init);\n    setBody(initialPosition);\n    setFields(initFields(35, ...initialPosition));\n  };\n\n  const onChangeDirection = useCallback((newDirection: directionWord): directionWord | void => {\n    if(status !== GameStatus.playing) {\n      return direction;\n    };\n    if (OppositeDirection[direction] === newDirection) {\n      return;\n    };\n    setDirection(newDirection);\n  }, [direction, status]);\n\n  const onChangeDifficulty = useCallback((difficulty: number): void => {\n    if(status !== GameStatus.init) {\n      return;\n    };\n    if (difficulty < 1 || difficulty > Difficulty.length) {\n      return;\n    };\n    setDifficulty(difficulty);\n  }, [status, difficulty]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const newDirection = DirectionKeyCodeMap[e.key];\n      if(!newDirection) {\n        return;\n      }\n      onChangeDirection(newDirection);\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [onChangeDirection])\n\n  const handleMoving = (): boolean => {\n    const { x, y } = body[0];\n    const delta: initialPosi = Delta[direction];\n    const newPosition: initialPosi = {\n      x: x + delta.x,\n      y: y + delta.y\n    }\n    if(isCollision(fields.length, newPosition) || isEatingMysellf(fields, newPosition)) {\n      return false;\n    };\n    const newBody: initialPosi[] = [...body];\n    if(fields[newPosition.y][newPosition.x] !== 'food') {\n      const removingTrack: initialPosi | undefined = newBody.pop()\n      removingTrack && (fields[removingTrack.y][removingTrack.x] = '');\n    } else {\n      const food = getFoodPosition(fields.length, [...newBody, newPosition]);\n      fields[food.y][food.x] = 'food';\n    };\n    fields[newPosition.y][newPosition.x] = 'snake';\n    newBody.unshift(newPosition)\n    setBody(newBody);\n    setFields(fields);\n    return true;\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div className=\"title-container\">\n          <h1 className=\"title\">Snake Game</h1>\n        </div>\n        <Navigation \n          length={ body.length }\n          difficulty={ difficulty }\n          onChangeDifficulty={ onChangeDifficulty }\n        />\n      </header>\n      <main className=\"main\">\n        <Field fields={fields}/>\n      </main>\n      <footer className=\"footer\">\n        <Button \n          status={ status }\n          onStart={ onStart }\n          onRestart={ onRestart }\n          onStop={ onStop }\n        />\n        <MnipulationPanel onChange={ onChangeDirection } />\n      </footer>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}