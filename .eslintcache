[{"/Users/motohiroyamagishi/Documents/learning-hooks-snake-game/src/App.tsx":"1","/Users/motohiroyamagishi/Documents/learning-hooks-snake-game/src/index.tsx":"2","/Users/motohiroyamagishi/Documents/learning-hooks-snake-game/src/components/Navigation.tsx":"3","/Users/motohiroyamagishi/Documents/learning-hooks-snake-game/src/components/Button.tsx":"4","/Users/motohiroyamagishi/Documents/learning-hooks-snake-game/src/components/ManipulationPanel.tsx":"5"},{"size":6095,"mtime":1607852832753,"results":"6","hashOfConfig":"7"},{"size":500,"mtime":1607842422984,"results":"8","hashOfConfig":"7"},{"size":1442,"mtime":1607853767576,"results":"9","hashOfConfig":"7"},{"size":767,"mtime":1607854263361,"results":"10","hashOfConfig":"7"},{"size":1227,"mtime":1607856087013,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"xwycau",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/motohiroyamagishi/Documents/learning-hooks-snake-game/src/App.tsx",["23","24"],"import React, { FC, useState, useEffect, useCallback } from 'react';\nimport Navigation from './components/Navigation';\nimport Field from './components/Field';\nimport Button from './components/Button';\nimport MnipulationPanel from './components/ManipulationPanel';\nimport { initFields, getFoodPosition } from './utils/index';\n\ntype initDelta = {[word: string]: initialPosi};\nexport type gameStatusWord = 'init' |'playing' | 'suspended' | 'gameover';\ntype gameStatusInit = {\n  init: 'init',\n  playing: 'playing',\n  suspended: 'suspended',\n  gameover: 'gameover',\n};\nconst GameStatus: Readonly<gameStatusInit> = {\n  init: 'init',\n  playing: 'playing',\n  suspended: 'suspended',\n  gameover: 'gameover',\n};\nexport type directionWord = 'up' | 'right' | 'left' | 'down';\ntype directionInit = {\n  up: 'up' | 'down',\n  right: 'right' | 'left',\n  left: 'left' | 'right',\n  down: 'down' | 'up',\n};\nconst Direction: Readonly<directionInit> = {\n  up: 'up',\n  right: 'right',\n  left: 'left',\n  down: 'down',\n};\nconst OppositeDirection: Readonly<directionInit> = {\n  up: 'down',\n  right: 'left',\n  left: 'right',\n  down: 'up',\n};\nconst DirectionKeyCodeMap: Readonly<{[KeyboardEvent: string]: directionWord}> = {\n  w: Direction.up,\n  a: Direction.left,\n  d: Direction.right,\n  s: Direction.down\n}\nexport type initialPosi = {x: number, y: number};\nconst initialPosition: Required<[initialPosi]> = [{ x: 17, y: 17 }]\nconst Delta: initDelta = {\n  up: { x: 0, y: -1 },\n  right: { x: 1, y: 0 },\n  left: { x: -1, y: 0 },\n  down: { x: 0, y: 1 },\n};\nconst initialValues: Required<string[][]> = initFields(35, ...initialPosition);\nconst defaultInterval: Readonly<number> = 100;\nconst defaultDifficuty: number = 3;\n\nconst Difficulty: Readonly<number[]> = [1000, 500, 100, 50, 10];\n\nlet timer: NodeJS.Timer | undefined = undefined;\n\nconst unsubscribe = () => {\n  if (!timer) {\n    return\n  }\n  clearInterval(timer)\n};\n\nconst isCollision = (fieldSize: number, position: initialPosi) => {\n  if(position.y < 0 || position.x < 0) {\n    return true;\n  };\n  if(position.y > fieldSize -1 || position.x > fieldSize -1) {\n    unsubscribe()\n    return true;\n  };\n  return false;\n};\n\nconst isEatingMysellf = (fields: string[][], position: initialPosi) => {\n  return fields[position.y][position.x] === 'snake';\n};\n\nconst App: FC = () => {\n  const [ fields, setFields ] = useState<string[][]>(initialValues);\n  const [ body, setBody ] = useState<initialPosi[]>(initialPosition);\n  const [status, setStatus] = useState<gameStatusWord>(GameStatus.init);\n  const [ difficulty, setDifficulty ] = useState(defaultDifficuty);\n  const [ tick, setTick ] = useState(0);\n  const [ direction, setDirection ] = useState<directionWord>(Direction.up);\n\n  useEffect(() => {\n    setBody(initialPosition);\n    const interval = Difficulty[difficulty - 1];\n    timer = setInterval(() => {\n      setTick(tick => tick +1);\n    }, interval);\n    return unsubscribe;\n  }, [difficulty]);\n\n  useEffect(() => {\n    if (!body.length || status !== GameStatus.playing) {\n      return\n    }\n    const canContinue = handleMoving();\n    if(!canContinue) {\n      unsubscribe()\n      setStatus(GameStatus.gameover)\n    }\n  }, [tick]);\n\n  const onStart = (): void => setStatus(GameStatus.playing);\n\n  const onStop = (): void => setStatus(GameStatus.suspended);\n\n  const onRestart = (): void => {\n    timer = setInterval(() => {\n      setTick(tick => tick + 1);\n    }, defaultInterval);\n    setDirection(Direction.up);\n    setStatus(GameStatus.init);\n    setBody(initialPosition);\n    setFields(initFields(35, ...initialPosition));\n  };\n\n  const onChangeDirection = useCallback((newDirection: directionWord): directionWord | void => {\n    if(status !== GameStatus.playing) {\n      return direction;\n    };\n    if (OppositeDirection[direction] === newDirection) {\n      return;\n    };\n    setDirection(newDirection);\n  }, [direction, status]);\n\n  const onChangeDifficulty = useCallback((difficulty: number): void => {\n    if(status !== GameStatus.init) {\n      return;\n    };\n    if (difficulty < 1 || difficulty > Difficulty.length) {\n      return;\n    };\n    setDifficulty(difficulty);\n  }, [status, difficulty]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const newDirection = DirectionKeyCodeMap[e.key];\n      if(!newDirection) {\n        return;\n      }\n      onChangeDirection(newDirection);\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [onChangeDirection])\n\n  const handleMoving = (): boolean => {\n    const { x, y } = body[0];\n    const delta: initialPosi = Delta[direction];\n    const newPosition: initialPosi = {\n      x: x + delta.x,\n      y: y + delta.y\n    }\n    if(isCollision(fields.length, newPosition) || isEatingMysellf(fields, newPosition)) {\n      return false;\n    };\n    const newBody: initialPosi[] = [...body];\n    if(fields[newPosition.y][newPosition.x] !== 'food') {\n      const removingTrack: initialPosi | undefined = newBody.pop()\n      removingTrack && (fields[removingTrack.y][removingTrack.x] = '');\n    } else {\n      const food = getFoodPosition(fields.length, [...newBody, newPosition]);\n      fields[food.y][food.x] = 'food';\n    };\n    fields[newPosition.y][newPosition.x] = 'snake';\n    newBody.unshift(newPosition)\n    setBody(newBody);\n    setFields(fields);\n    return true;\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div className=\"title-container\">\n          <h1 className=\"title\">Snake Game</h1>\n        </div>\n        <Navigation \n          length={ body.length }\n          difficulty={ difficulty }\n          onChangeDifficulty={ onChangeDifficulty }\n        />\n      </header>\n      <main className=\"main\">\n        <Field fields={fields}/>\n      </main>\n      <footer className=\"footer\">\n        <Button \n          status={ status }\n          onStart={ onStart }\n          onRestart={ onRestart }\n          onStop={ onStop }\n        />\n        <MnipulationPanel onChange={ onChangeDirection } />\n      </footer>\n    </div>\n  );\n};\n\nexport default App;\n","/Users/motohiroyamagishi/Documents/learning-hooks-snake-game/src/index.tsx",[],"/Users/motohiroyamagishi/Documents/learning-hooks-snake-game/src/components/Navigation.tsx",[],"/Users/motohiroyamagishi/Documents/learning-hooks-snake-game/src/components/Button.tsx",[],"/Users/motohiroyamagishi/Documents/learning-hooks-snake-game/src/components/ManipulationPanel.tsx",[],{"ruleId":"25","severity":1,"message":"26","line":111,"column":6,"nodeType":"27","endLine":111,"endColumn":12,"suggestions":"28"},{"ruleId":"25","severity":1,"message":"29","line":145,"column":6,"nodeType":"27","endLine":145,"endColumn":26,"suggestions":"30"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'body.length', 'handleMoving', and 'status'. Either include them or remove the dependency array.","ArrayExpression",["31"],"React Hook useCallback has an unnecessary dependency: 'difficulty'. Either exclude it or remove the dependency array.",["32"],{"desc":"33","fix":"34"},{"desc":"35","fix":"36"},"Update the dependencies array to be: [body.length, handleMoving, status, tick]",{"range":"37","text":"38"},"Update the dependencies array to be: [status]",{"range":"39","text":"40"},[3152,3158],"[body.length, handleMoving, status, tick]",[4116,4136],"[status]"]